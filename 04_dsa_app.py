# Projeto Final - Deploy de Modelo PySpark e API Para Web App de Sistema de Recomenda√ß√£o em Tempo Real
# M√≥dulo da App Para Consumir a API do Modelo

# Imports
import streamlit as st
import requests

# Configura√ß√µes da p√°gina da aplica√ß√£o
st.set_page_config(
    page_title="Sistema de Recomenda√ß√£o",
    page_icon="üéØ",
    layout="wide"
)

# Barra lateral com t√≠tulo e instru√ß√µes
st.sidebar.title("Sistema de Recomenda√ß√£o")
st.sidebar.markdown("""
Este sistema permite gerar recomenda√ß√µes personalizadas para usu√°rios com base em dados hist√≥ricos.
    
### Instru√ß√µes:
1. Insira o **ID do usu√°rio** no campo fornecido.
2. Selecione o n√∫mero de recomenda√ß√µes desejado usando o controle deslizante.
3. Clique no bot√£o **Obter Recomenda√ß√µes** para visualizar as sugest√µes.
""")

# T√≠tulo principal da p√°gina
st.title("üéØ Sistema de Recomenda√ß√£o em Tempo Real")

# Entrada de dados no painel principal
st.subheader("Insira os detalhes para obter recomenda√ß√µes:")
user_id = st.number_input("ID do usu√°rio:", min_value=1, step=1, help="Insira o identificador √∫nico do usu√°rio.")
num_recs = st.slider("N√∫mero de recomenda√ß√µes:", min_value=1, max_value=20, value=5, help="Escolha quantas recomenda√ß√µes deseja obter.")

# Bot√£o para obter recomenda√ß√µes
if st.button("Obter Recomenda√ß√µes"):

    # Configura√ß√£o dos par√¢metros para a chamada √† API
    params = {'user_id': user_id, 'num_recs': num_recs}
    
    try:
        # Chamada √† API para obter recomenda√ß√µes
        response = requests.get("http://localhost:8000/predict/", params=params)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        # Exibe uma mensagem de erro em caso de falha na conex√£o
        st.error(f"Erro ao conectar com a API: {e}")
    else:
        # Processa a resposta da API
        data = response.json()
        if data['recommendations']:
            st.success(f"Recomenda√ß√µes para o usu√°rio {data['user_id']}:")
            # Exibe as recomenda√ß√µes em formato de tabela
            recommendations = data['recommendations']
            st.table(recommendations)
        else:
            # Mensagem caso n√£o haja recomenda√ß√µes para o usu√°rio
            st.warning(f"Nenhuma recomenda√ß√£o encontrada para o usu√°rio {data['user_id']}.")

# Rodap√© da aplica√ß√£o
st.sidebar.markdown("---")
st.sidebar.markdown("Desenvolvido como parte do Projeto Final.")
st.sidebar.markdown("¬© Data Science Academy.")

